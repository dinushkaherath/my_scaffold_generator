class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_table_name %>, only: %i[ show edit update destroy ]

  # GET /<%= plural_table_name %>
  def index
    @<%= plural_table_name %> = <%= class_name %>.order(created_at: :desc)
    @new_<%= singular_table_name %> = <%= class_name %>.new
  end

  # GET /<%= plural_table_name %>/1
  def show
  end

  # GET /<%= plural_table_name %>/new
  def new
    @<%= singular_table_name %> = <%= class_name %>.new
  end

  # GET /<%= plural_table_name %>/1/edit
  def edit
  end

  # POST /<%= plural_table_name %>
  def create
    @<%= singular_table_name %> = <%= class_name %>.new(<%= singular_table_name %>_params)

    if @<%= singular_table_name %>.save
      flash.now[:notice] = '<%= human_name %> successfully created.'

      respond_to do |format|
        format.turbo_stream { @new_<%= singular_table_name %> = <%= class_name %>.new }
        format.html { redirect_to <%= plural_table_name %>_url, notice: '<%= human_name %> was successfully created.' }
      end
    else
      respond_to do |format|
        format.html { render :new, status: :unprocessable_entity }
        format.turbo_stream { render turbo_stream: turbo_stream.replace('new_<%= singular_table_name %>', partial: "<%= plural_table_name %>/form", locals: { <%= singular_table_name %>: @<%= singular_table_name %> }) }
      end
    end
  end

  # PATCH/PUT /<%= plural_table_name %>/1
  def update
    if @<%= singular_table_name %>.update(<%= singular_table_name %>_params)
      flash.now[:notice] = '<%= human_name %> successfully updated.'

      respond_to do |format|
        format.turbo_stream
        format.html { redirect_to <%= plural_table_name %>_url, notice: '<%= human_name %> was successfully updated.' }
      end
    else
      respond_to do |format|
        format.html { render :edit, status: :unprocessable_entity }
        format.turbo_stream { render turbo_stream: turbo_stream.replace(@<%= singular_table_name %>, partial: "<%= plural_table_name %>/form", locals: { <%= singular_table_name %>: @<%= singular_table_name %> }) }
      end
    end
  end

  # DELETE /<%= plural_table_name %>/1
  def destroy
    @<%= singular_table_name %>.destroy

    flash.now[:alert] = 'Task was successfully destroyed.'

    respond_to do |format|
      format.turbo_stream
      format.html { redirect_to <%= plural_table_name %>_url, alert: '<%= human_name %> was successfully destroyed.' }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = <%= class_name %>.find(params[:id])
    end

    # Only allow a list of trusted parameters through.
    def <%= singular_table_name %>_params
      params.require(:<%= singular_table_name %>).permit(<%= attributes_names.map { |name| ":#{name}" }.join(", ") %>)
    end
end
